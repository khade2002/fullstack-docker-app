import leven from 'leven';
import pointer from 'jsonpointer';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var AJV_ERROR_KEYWORD_WEIGHT_MAP = {
  "enum": 1,
  type: 0
};
var QUOTES_REGEX = /"/g;
var NOT_REGEX = /NOT/g;
var SLASH_REGEX = /\//g;

var filterSingleErrorPerProperty = function filterSingleErrorPerProperty(errors) {
  var errorsPerProperty = errors.reduce(function (acc, error) {
    var _ref, _error$params$additio, _error$params, _error$params2, _AJV_ERROR_KEYWORD_WE, _AJV_ERROR_KEYWORD_WE2;

    var prop = error.instancePath + ((_ref = (_error$params$additio = (_error$params = error.params) == null ? void 0 : _error$params.additionalProperty) != null ? _error$params$additio : (_error$params2 = error.params) == null ? void 0 : _error$params2.missingProperty) != null ? _ref : '');
    var existingError = acc[prop];

    if (!existingError) {
      acc[prop] = error;
      return acc;
    }

    var weight = (_AJV_ERROR_KEYWORD_WE = AJV_ERROR_KEYWORD_WEIGHT_MAP[error.keyword]) != null ? _AJV_ERROR_KEYWORD_WE : 0;
    var existingWeight = (_AJV_ERROR_KEYWORD_WE2 = AJV_ERROR_KEYWORD_WEIGHT_MAP[existingError.keyword]) != null ? _AJV_ERROR_KEYWORD_WE2 : 0;

    if (weight > existingWeight) {
      acc[prop] = error;
    }

    return acc;
  }, {});
  return Object.values(errorsPerProperty);
};

var getSuggestion = function getSuggestion(_ref) {
  var value = _ref.value,
      suggestions = _ref.suggestions,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? function (suggestion) {
    return "Did you mean '" + suggestion + "'?";
  } : _ref$format;
  if (!value) return '';
  var bestSuggestion = suggestions.reduce(function (best, current) {
    var distan